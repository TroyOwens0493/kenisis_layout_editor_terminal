namespace HandleUserInteraction
{
    using System;

    public class MenuHandler
    {

        public int DisplayMainMenu()
        {
            InputOutput getInput = new();

            var linesToPrint = new string[]
            {
            "Main menu",
            "You can type a number and press enter.",
            "1. Edit a layout",
            "2. Edit a macro",
            "3. Exit"
            };

            Console.Clear();
            for (int i = 0; i < linesToPrint.Length; i++)
            {
                Console.WriteLine(linesToPrint[i]);
            }
            int selection = getInput.GetUserInt();

            return selection; // Return the user's valid selection
        }

        public int DisplayKeymaps(List<string> keyMapNames)
        {
            InputOutput input = new();
            Console.Clear();
            Console.WriteLine("Please choose which keymap you would like to edit: ");
            for (int i = 0; i < keyMapNames.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {keyMapNames[i]}");
            }
            return input.GetUserInt() - 1;
        }

        public void DisplayLayout(List<List<List<string>>> keymaps, int indexOfKeymapToDisplay)
        {
            List<List<string>> keyMapToDisplay = keymaps[indexOfKeymapToDisplay];
            InputOutput inAndOut = new();
            for (int i = 1; i < keyMapToDisplay.Count; i++)
            {
                for (int j = 0; j < keyMapToDisplay[i].Count; j++)
                {
                    string[] keyInfo = keyMapToDisplay[i][j].Split(' ');
                    var output = inAndOut.TranslateKeyInfo(keyInfo[0], keyInfo[1], i);
                    Console.WriteLine(output[0]);
                    Console.WriteLine(output[1]);
                    Console.WriteLine(output[2]);
                }
            }
        }
    }

    public class InputOutput
    {
        public int GetUserInt()
        {
            bool running = true;
            string? userSelection;
            int selectedInt = 0;

            do
            {
                userSelection = Console.ReadLine();

                if (string.IsNullOrEmpty(userSelection))
                {
                    Console.WriteLine("Please enter something");
                    continue;
                }
                try
                {
                    selectedInt = int.Parse(userSelection);
                }
                catch
                {
                    Console.WriteLine("Please enter a valid number");
                    continue;
                }

                running = false;
            } while (running);

            return selectedInt;
        }

        public List<string?> TranslateKeyInfo(string keyPress, string keyAction, int i)
        {
            KeyBehaviorTranslator BiMapInit = new();
            var keyCodeMap = BiMapInit.MakeKeyBehaviorTranslationBiMap();
            var keyActionMap = BiMapInit.MakeKeyCodeTranslationBiMap();
            string index = $"{i}";
            var alphabet = "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z".Split(',');

            if (keyPress == "&trans")
            {
                return [index, keyCodeMap.GetRightToLeft(keyPress), "None"];
            }
            else if ((keyPress == "&tog") | (keyPress == "&mo"))
            {
                return [index, keyCodeMap.GetRightToLeft(keyPress), keyAction];
            }
            else
            {
                for (int itr = 0; i < alphabet.Length; itr++)
                {
                    if (keyAction.ToLower() == alphabet[i])
                    {
                        return [index, keyCodeMap.GetRightToLeft(keyPress), keyAction];
                    }
                }
                return [index, keyCodeMap.GetRightToLeft(keyPress), keyActionMap.GetRightToLeft(keyAction)];
            }
        }
    }
